// <auto-generated />
using System;
using LibreriaColibri.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibreriaColibri.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LibreriaColibri.Data.TAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nameAuthor");

                    b.HasKey("Id");

                    b.ToTable("t_Authors", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Depot")
                        .HasColumnType("int")
                        .HasColumnName("depot");

                    b.Property<int>("IdPh")
                        .HasColumnType("int")
                        .HasColumnName("idPH");

                    b.Property<string>("Img")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("img");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("price");

                    b.Property<int>("Sold")
                        .HasColumnType("int")
                        .HasColumnName("sold");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tittle");

                    b.HasKey("Id");

                    b.HasIndex("IdPh");

                    b.ToTable("t_Books", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TBookAuthor", b =>
                {
                    b.Property<int>("IdAuthor")
                        .HasColumnType("int")
                        .HasColumnName("idAuthor");

                    b.Property<int>("IdBook")
                        .HasColumnType("int")
                        .HasColumnName("idBook");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdBook");

                    b.ToTable("t_BookAuthor", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TBookCategory", b =>
                {
                    b.Property<int>("IdBook")
                        .HasColumnType("int")
                        .HasColumnName("idBook");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdCategory");

                    b.ToTable("t_BookCategory", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TCarBook", b =>
                {
                    b.Property<int?>("IdBook")
                        .HasColumnType("int")
                        .HasColumnName("idBook");

                    b.Property<int?>("IdCar")
                        .HasColumnType("int")
                        .HasColumnName("idCar");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdCar");

                    b.ToTable("t_CarBook", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameCat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nameCat");

                    b.HasKey("Id");

                    b.ToTable("t_Categories", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int")
                        .HasColumnName("idStatus");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("Id");

                    b.HasIndex("IdStatus");

                    b.ToTable("t_Orders", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TOrderBook", b =>
                {
                    b.Property<int>("IdBook")
                        .HasColumnType("int")
                        .HasColumnName("idBook");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int")
                        .HasColumnName("idOrder");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdOrder");

                    b.ToTable("t_OrderBook", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TPublishingHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NamePh")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("namePH");

                    b.HasKey("Id");

                    b.ToTable("t_PublishingHouse", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TShoppingCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("Id");

                    b.ToTable("t_ShoppingCar", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Data.TStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("statusName");

                    b.HasKey("Id");

                    b.ToTable("t_Status", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibreriaColibri.Models.Usuario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Usuario");
                });

            modelBuilder.Entity("LibreriaColibri.Data.TBook", b =>
                {
                    b.HasOne("LibreriaColibri.Data.TPublishingHouse", "IdPhNavigation")
                        .WithMany("TBooks")
                        .HasForeignKey("IdPh")
                        .IsRequired()
                        .HasConstraintName("FK_t_PublishingHouse_t_Books");

                    b.Navigation("IdPhNavigation");
                });

            modelBuilder.Entity("LibreriaColibri.Data.TBookAuthor", b =>
                {
                    b.HasOne("LibreriaColibri.Data.TAuthor", "IdAuthorNavigation")
                        .WithMany()
                        .HasForeignKey("IdAuthor")
                        .IsRequired()
                        .HasConstraintName("FK__t_BookAut__idAut__5535A963");

                    b.HasOne("LibreriaColibri.Data.TBook", "IdBookNavigation")
                        .WithMany()
                        .HasForeignKey("IdBook")
                        .IsRequired()
                        .HasConstraintName("FK__t_BookAut__idBoo__5441852A");

                    b.Navigation("IdAuthorNavigation");

                    b.Navigation("IdBookNavigation");
                });

            modelBuilder.Entity("LibreriaColibri.Data.TBookCategory", b =>
                {
                    b.HasOne("LibreriaColibri.Data.TBook", "IdBookNavigation")
                        .WithMany()
                        .HasForeignKey("IdBook")
                        .IsRequired()
                        .HasConstraintName("FK__t_BookCat__idBoo__6EF57B66");

                    b.HasOne("LibreriaColibri.Data.TCategory", "IdCategoryNavigation")
                        .WithMany()
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK__t_BookCat__idCat__6FE99F9F");

                    b.Navigation("IdBookNavigation");

                    b.Navigation("IdCategoryNavigation");
                });

            modelBuilder.Entity("LibreriaColibri.Data.TCarBook", b =>
                {
                    b.HasOne("LibreriaColibri.Data.TBook", "IdBookNavigation")
                        .WithMany()
                        .HasForeignKey("IdBook")
                        .HasConstraintName("FK__t_CarBook__idBoo__6D0D32F4");

                    b.HasOne("LibreriaColibri.Data.TShoppingCar", "IdCarNavigation")
                        .WithMany()
                        .HasForeignKey("IdCar")
                        .HasConstraintName("FK__t_CarBook__idCar__0C85DE4D");

                    b.Navigation("IdBookNavigation");

                    b.Navigation("IdCarNavigation");
                });

            modelBuilder.Entity("LibreriaColibri.Data.TOrder", b =>
                {
                    b.HasOne("LibreriaColibri.Data.TStatus", "IdStatusNavigation")
                        .WithMany("TOrders")
                        .HasForeignKey("IdStatus")
                        .IsRequired()
                        .HasConstraintName("FK_t_Orders_t_Status");

                    b.Navigation("IdStatusNavigation");
                });

            modelBuilder.Entity("LibreriaColibri.Data.TOrderBook", b =>
                {
                    b.HasOne("LibreriaColibri.Data.TBook", "IdBookNavigation")
                        .WithMany()
                        .HasForeignKey("IdBook")
                        .IsRequired()
                        .HasConstraintName("FK__t_OrderBo__idBoo__628FA481");

                    b.HasOne("LibreriaColibri.Data.TOrder", "IdOrderNavigation")
                        .WithMany()
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("FK__t_OrderBo__idOrd__6383C8BA");

                    b.Navigation("IdBookNavigation");

                    b.Navigation("IdOrderNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibreriaColibri.Data.TPublishingHouse", b =>
                {
                    b.Navigation("TBooks");
                });

            modelBuilder.Entity("LibreriaColibri.Data.TStatus", b =>
                {
                    b.Navigation("TOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
